TODO:
- (FIXED) RBDat.txt seems to contain descriptions and not frame data?
- (DONE) Move frame_listeners to __unpack_mocap_data.
- (DONE) Attach frame_prefix to returned frames.
- Define SQL DBs for each asset type.
- Parcel out frame data into respective DBs.
- Find out why frame data contains ~1/2 the data they should.
    - Cameras should be sampling at 120Hz, but only 65 frames were returned
- Find out if initial empty frame is by design or error.
    - If the former, easy enough to just pass over.
    - If the latter, fixing the error would be nice.
        - That said, assuming that only the initial frame is lost, this is utterly inconsequential.



Notes:
- Should there be unique listeners for each asset type?
- Or, a single listener?
    - If so, should it always return all asset types, even when empty?
    - Or, conditionally return asset types specified by the user?
        - Oh, maybe this is just a matter of checking MoCapData objs respective counters?
- Ideally, future versions of OptiTracker will only spawn DBs as needed.
- Lines 181-184 in NatNetClient.py (tmp_commands) make me wonder what other commands are available
    - Would be great if these could be used to procedurally label & record takes by trial.
    - C-hooks could be used to leverage the Cpp API which has these features. 